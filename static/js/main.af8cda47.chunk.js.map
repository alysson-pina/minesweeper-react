{"version":3,"sources":["components/board/Board.jsx","components/board/styles.js","logo.svg","App.jsx","reportWebVitals.js","index.js","utils/position.js","utils/mediaQueries.js","utils/initBoard.js","utils/getPublicUrl.js","components/game/styles.js","components/game/Game.jsx","components/field/styles.js","components/field/Field.jsx"],"names":["Board","bombCount","setBombCount","lost","setLost","structure","width","height","fieldsRef","useRef","isLargeScreen","useLargeScreen","updateBombCount","flagged","revealNeighborhood","row","column","pos","get1DIndexFrom2D","columns","rows","x","y","candidateFieldPos","ref","current","setImmediate","click","map","i","j","value","el","hasMine","Wrapper","styled","div","props","App","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","get2DIndexFrom1D","Math","floor","Number","parseInt","useMediaQuery","updateNeighbours","index1D","nOfBombs","prependWithPublicUrl","url","process","Head","Face","mouseDown","Game","useState","attempts","setAttempts","onMouseDown","useMemo","Array","from","length","_","count","random","initStructure","restartGame","useCallback","fromResize","useEffect","onClick","onMouseUp","Cell","mistakeWasHere","CLASSES","Object","freeze","B","MB","F","U","Field","React","forwardRef","clicked","setClicked","isFlagged","setFlagged","content","setContent","e","preventDefault","onContextMenu","newValue"],"mappings":"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","file":"static/js/main.af8cda47.chunk.js","sourcesContent":["\nimport React, { useRef } from 'react'\n\n\nimport { Wrapper } from './styles'\nimport { Field } from '..'\nimport { get1DIndexFrom2D } from '../../utils/position'\nimport { useLargeScreen } from '../../utils/mediaQueries'\n\nconst Board = ({ bombCount, setBombCount, lost, setLost, structure, width, height }) => {\n  const fieldsRef = useRef([])\n  const isLargeScreen = useLargeScreen()\n\n  const updateBombCount = (flagged) => setBombCount(bombCount + (flagged ? -1 : 1))\n\n  const revealNeighborhood = (row, column) => {\n    const pos = get1DIndexFrom2D(column, row, width)\n    const columns = [column - 1, column, column + 1]\n    const rows = [row - 1, row, row + 1]\n\n    for(let x in columns) {\n      for (let y in rows ) {\n        const candidateFieldPos = get1DIndexFrom2D(columns[x], rows[y], width)\n        if(\n          (candidateFieldPos === pos) || // avoid same field again\n          (columns[x] < 0 || rows[y] < 0) || // avoid inexistant left or top edges\n          ( rows[y] >= height || columns[x] >= width ) // avoid inexistant right or bottom edges\n          ) {\n            continue\n          }\n\n          const ref = fieldsRef.current[candidateFieldPos]\n\n          setImmediate(\n            () => ref.click() // async click to avoid infinite loop\n          )\n      }\n    }\n  }\n\n  return (\n    <Wrapper isLargeScreen={isLargeScreen}>\n      {\n        structure?.map(({ i, j, value }) => {\n          const pos = get1DIndexFrom2D(j, i, width)\n\n          return (\n            <Field\n              ref={el => {\n                fieldsRef.current[pos] = el\n              } }\n              key={`${i}_${j}`} \n              row={i}\n              column={j}\n              hasMine={value === 'B'}\n              value={value}\n              lost={lost}\n              setLost={setLost}\n              updateBombCount={updateBombCount}\n              revealNeighborhood={revealNeighborhood}\n            />\n          )\n        })\n      }\n    </Wrapper>\n  )\n}\n\nexport default Board\n","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: ${props => props.isLargeScreen ? '970px' : '516px'};\n`\n\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg'\nimport './App.css'\n\nimport { Game } from './components'\n\nconst App = () => {\n  return (\n    <main className=\"App\">\n      <h1>\n        Modern React Minesweeper <img width='64' src={logo} className='App-logo' alt='react logo'/>\n      </h1>\n      <section className=\"App-header\">\n        <Game />\n      </section>\n    </main>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const get2DIndexFrom1D = (pos, width) => ({\n  i: Math.floor(pos / width),\n  j: pos % width\n})\n\nexport const get1DIndexFrom2D = (column, row, width) => (\n  Number.parseInt(column) + Number.parseInt(row) * width\n)\n","import useMediaQuery from '@material-ui/core/useMediaQuery'\n\nexport const useLargeScreen = () => useMediaQuery('(min-width:980px)')\n","import { get1DIndexFrom2D, get2DIndexFrom1D } from './position'\n\nexport const initStructure = (height, width, bombCount) => {\n  const structure = Array.from(\n    { length: height * width }, (_, i) => ({\n      i: Math.floor(i / width),\n      j: i % width,\n      value: ''\n    })\n  )\n\n  let pos\n  let count = 0\n\n  while (count < bombCount) {\n    pos = Math.floor((Math.random() * height * width))\n\n    if (structure[pos].value !== 'B') {\n      structure[pos].value = 'B'\n      updateNeighbours(structure, pos, width, height)\n      count += 1\n    }\n  }\n\n  return structure\n}\n\nconst updateNeighbours = (structure, pos, width, height) => {\n  const { i, j } = get2DIndexFrom1D(pos, width)\n  const rows = [i - 1, i, i + 1]\n  const columns = [j - 1, j, j + 1]\n\n  let index1D, nOfBombs\n\n  for (const x in rows) {\n    for (const y in columns) {\n      if (\n        (rows[x] < 0 || columns[y] < 0) ||\n        (columns[y] >= width || rows[x] >= height)\n      ) {\n        continue\n      }\n\n      index1D = get1DIndexFrom2D(columns[y], rows[x], width)\n      if (structure[index1D] && structure[index1D]?.value !== 'B') {\n        nOfBombs = structure[index1D].value\n        structure[index1D].value = nOfBombs ? nOfBombs + 1 : 1\n      }\n    }\n  }\n}\n","const prependWithPublicUrl = (url) => process.env.PUBLIC_URL ? `${process.env.PUBLIC_URL}/${url}` : url\n\nexport default prependWithPublicUrl\n","import styled from 'styled-components'\nimport prependWithPublicUrl from '../../utils/getPublicUrl'\n\nexport const Head = styled.div`\n  margin: 20px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: 600;\n`\n\nexport const Face = styled.div`\n  background-image: url(${prependWithPublicUrl('sprite200.gif')});\n  background-position: ${props => props.mouseDown ? '-104px -110px' : props.lost ? '-156px -110px' : '0 -110px' };\n  width: 52px;\n  height: 52px;\n`\n","import React, { useCallback, useEffect, useState, useMemo } from 'react'\n\nimport { Board } from '..'\nimport { initStructure } from '../../utils/initBoard'\nimport { useLargeScreen } from '../../utils/mediaQueries'\nimport { Face, Head } from './styles'\n\nconst Game = () => {\n  const isLargeScreen = useLargeScreen()\n  const [height, width] = [16, isLargeScreen ? 30 : 16]\n  const [attempts, setAttempts] = useState(1)\n  const [bombCount, setBombCount] = useState(isLargeScreen ? 99 : 52)\n  const [lost, setLost] = useState(false)\n  const [mouseDown, onMouseDown] = useState(false)\n\n  const structure = useMemo(\n    () => initStructure(height, width, bombCount),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [attempts, width]\n  )\n\n  const restartGame = useCallback(fromResize => {\n    setBombCount(isLargeScreen ? 99 : 52)\n    setAttempts(value => value + fromResize ? 0 : 1)\n    setLost(false)\n  }, [setAttempts, setBombCount, setLost, isLargeScreen])\n\n  useEffect(() => {\n    restartGame(true)\n  }, [restartGame, isLargeScreen])\n\n  return (\n    <div>\n      <Head>\n        <div>Bombs left: {bombCount}</div>\n        <Face lost={lost} mouseDown={mouseDown} onClick={restartGame} />\n        <div>{lost ? 'You lost!' : `Attempt #${attempts}`}</div>\n      </Head>\n      <div\n        onMouseDown={() => onMouseDown(true)}\n        onMouseUp={() => onMouseDown(false)}\n      >\n        <Board\n          bombCount={bombCount}\n          setBombCount={setBombCount}\n          lost={lost}\n          setLost={setLost}\n          structure={structure}\n          width={width}\n          height={height}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Game\n","import styled from 'styled-components'\nimport prependWithPublicUrl from '../../utils/getPublicUrl'\n\nexport const Cell = styled.div`\n  flex: 1 1 32px;\n  width: 32px;\n  height: 32px;\n  background-image: url(${prependWithPublicUrl('sprite200.gif')});\n  background-position: 0 -78px;\n\n  &.unclicked {\n    background-position: 0 -78px;\n  }\n\n  &.bomb {\n    background-position: ${props => props.mistakeWasHere ? '-64px -78px' : '-128px -78px;'}\n  }\n\n  &.mistakenBomb {\n    background-position: -96px -78px;\n  }\n  \n  &.zero {\n    background-position: 0 -46px;\n  }\n\n  &.flag {\n    background-position: -32px -78px;\n  }\n\n  &.one {\n    background-position: -32px -46px;\n  }\n\n  &.two {\n    background-position: -64px -46px;\n  }\n\n  &.three {\n    background-position: -96px -46px;\n  }\n\n  &.four {\n    background-position: -128px -46px;\n  }\n\n  &.five {\n    background-position: -160px -46px;\n  }\n\n  &.six {\n    background-position: -192px -46px;\n  }\n\n  &.seven {\n    background-position: -224px -46px;\n  }\n\n  &.eigth {\n    background-position: -256px -46px;\n  }\n`\n","\nimport React, { useEffect, useState } from 'react'\nimport { Cell } from './styles'\n\nconst CLASSES = Object.freeze({\n  0: 'zero',\n  1: 'one',\n  2: 'two',\n  3: 'three',\n  4: 'four',\n  5: 'five',\n  6: 'six',\n  7: 'seven',\n  8: 'eigth',\n  B: 'bomb',\n  MB: 'mistakenBomb',\n  F: 'flag',\n  U: 'unclicked'\n})\n\nconst Field = React.forwardRef(({ \n    hasMine, value, lost, setLost, updateBombCount, row, column, revealNeighborhood \n  }, ref) => {\n  const [clicked, setClicked] = useState(false)\n  const [isFlagged, setFlagged] = useState(false)\n  const [content, setContent] = useState('U')\n\n  useEffect(() => {\n    if(lost) {\n      if(content === 'F') {\n        if(!hasMine) {\n          setContent('MB')\n        }\n      } else {\n        setContent(value || 0)\n      }\n    } else {\n      setContent('U')\n      setClicked(false)\n      setFlagged(false)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lost, hasMine, setContent, value])\n\n  const handleRightClick = (e) => {\n    e.preventDefault()\n\n    if(clicked || lost) {\n      return\n    }\n\n    const newValue = !isFlagged\n\n    updateBombCount(newValue)\n    setFlagged(newValue)\n\n    if(newValue) {\n      setContent('F')\n    } else {\n      setContent('U')\n    }\n  }\n\n  const handleLeftClick = (e) => {\n    e.preventDefault()\n  \n    if(clicked || lost || content === 'F') {\n      return\n    }\n\n    setClicked(true)\n\n    if (hasMine) { // user clicked on a bomb\n      setContent('B')\n      setLost(true)\n    } else {\n      setContent(value || 0)\n    }\n\n    if(value === \"\") { // empty-cell, traverse the DOM\n      revealNeighborhood(row, column)\n    }\n  }\n\n  return (\n    <Cell\n      ref={ref}\n      onClick={handleLeftClick}\n      onContextMenu={handleRightClick} // to handle right click\n      mistakeWasHere={hasMine && clicked}\n      className={`row${row+1}_column${column+1} ${CLASSES[content]}`}\n      data-testid='minefield'\n    />\n  )\n})\n\nexport default Field\n"],"sourceRoot":""}