{"version":3,"sources":["components/board/Board.jsx","components/board/styles.js","logo.svg","App.jsx","reportWebVitals.js","index.js","utils/position.js","utils/initBoard.js","components/game/styles.js","components/game/Game.jsx","components/field/styles.js","components/field/Field.jsx"],"names":["Board","bombCount","setBombCount","lost","setLost","structure","width","height","fieldsRef","useRef","updateBombCount","flagged","revealNeighborhood","row","column","pos","get1DIndexFrom2D","columns","rows","x","y","candidateFieldPos","ref","current","setImmediate","click","map","i","j","value","el","hasMine","Wrapper","styled","div","App","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","get2DIndexFrom1D","Math","floor","Number","parseInt","updateNeighbours","index1D","nOfBombs","Head","Face","props","mouseDown","Game","useState","attempts","setAttempts","onMouseDown","useMemo","Array","from","length","_","count","random","initStructure","onClick","console","log","onMouseUp","Cell","mistakeWasHere","CLASSES","Object","freeze","B","MB","F","U","Field","React","forwardRef","clicked","setClicked","isFlagged","setFlagged","content","setContent","useEffect","e","preventDefault","onContextMenu","newValue"],"mappings":"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","file":"static/js/main.6b3b2f9e.chunk.js","sourcesContent":["\nimport React, { useRef } from 'react'\n\nimport { Wrapper } from './styles'\nimport { Field } from '..'\nimport { get1DIndexFrom2D } from '../../utils/position'\n\nconst Board = ({ bombCount, setBombCount, lost, setLost, structure, width, height }) => {\n  const fieldsRef = useRef([])\n\n  const updateBombCount = (flagged) => setBombCount(bombCount + (flagged ? -1 : 1))\n\n  const revealNeighborhood = (row, column) => {\n    const pos = get1DIndexFrom2D(column, row, width)\n    const columns = [column - 1, column, column + 1]\n    const rows = [row - 1, row, row + 1]\n\n    for(let x in columns) {\n      for (let y in rows ) {\n        const candidateFieldPos = get1DIndexFrom2D(columns[x], rows[y], width)\n        if(\n          (candidateFieldPos === pos) || // avoid same field again\n          (columns[x] < 0 || rows[y] < 0) || // avoid inexistant left or top edges\n          ( rows[y] >= height || columns[x] >= width ) // avoid inexistant right or bottom edges\n          ) {\n            continue\n          }\n\n          const ref = fieldsRef.current[candidateFieldPos]\n\n          setImmediate(\n            () => ref.click() // async click to avoid infinite loop\n          )\n      }\n    }\n  }\n\n  return (\n    <Wrapper>\n      {\n        structure?.map(({ i, j, value }) => {\n          const pos = get1DIndexFrom2D(j, i, width)\n\n          return (\n            <Field\n              ref={el => {\n                fieldsRef.current[pos] = el\n              } }\n              key={`${i}_${j}`} \n              row={i}\n              column={j}\n              hasMine={value === 'B'}\n              value={value}\n              lost={lost}\n              setLost={setLost}\n              updateBombCount={updateBombCount}\n              revealNeighborhood={revealNeighborhood}\n            />\n          )\n        })\n      }\n    </Wrapper>\n  )\n}\n\nexport default Board\n","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 970px;\n`\n\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg'\nimport './App.css'\n\nimport { Game } from './components'\n\nconst App = () => {\n  return (\n    <main className=\"App\">\n      <h1>\n        Modern React Minesweeper <img width='64' src={logo} className='App-logo' alt='react logo'/>\n      </h1>\n      <section className=\"App-header\">\n        <Game />\n      </section>\n    </main>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const get2DIndexFrom1D = (pos, width) => ({\n  i: Math.floor(pos / width),\n  j: pos % width\n})\n\nexport const get1DIndexFrom2D = (column, row, width) => (\n  Number.parseInt(column) + Number.parseInt(row) * width\n)\n","import { get1DIndexFrom2D, get2DIndexFrom1D } from './position'\n\nexport const initStructure = (height, width, bombCount) => {\n  const structure = Array.from(\n    { length: height * width }, (_, i) => ({\n      i: Math.floor(i / width),\n      j: i % width,\n      value: ''\n    })\n  )\n\n  let pos\n  let count = 0\n\n  while (count < bombCount) {\n    pos = Math.floor((Math.random() * height * width))\n\n    if (structure[pos].value !== 'B') {\n      structure[pos].value = 'B'\n      updateNeighbours(structure, pos, width, height)\n      count += 1\n    }\n  }\n\n  return structure\n}\n\nconst updateNeighbours = (structure, pos, width, height) => {\n  const { i, j } = get2DIndexFrom1D(pos, width)\n  const rows = [i - 1, i, i + 1]\n  const columns = [j - 1, j, j + 1]\n\n  let index1D, nOfBombs\n\n  for (const x in rows) {\n    for (const y in columns) {\n      if (\n        (rows[x] < 0 || columns[y] < 0) ||\n        (columns[y] >= width || rows[x] >= height)\n      ) {\n        continue\n      }\n\n      index1D = get1DIndexFrom2D(columns[y], rows[x], width)\n      if (structure[index1D] && structure[index1D]?.value !== 'B') {\n        nOfBombs = structure[index1D].value\n        structure[index1D].value = nOfBombs ? nOfBombs + 1 : 1\n      }\n    }\n  }\n}\n","import styled from 'styled-components'\n\nexport const Head = styled.div`\n  margin: 20px 0;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport const Face = styled.div`\n  background-image: url('%PUBLIC_URL%/sprite200.gif');\n  background-position: ${props => props.mouseDown ? '-104px -110px' : props.lost ? '-156px -110px' : '0 -110px' };\n  width: 52px;\n  height: 52px;\n`\n","import React, { useState, useMemo } from 'react'\n\nimport { Board } from '..'\nimport { initStructure } from '../../utils/initBoard'\nimport { Face, Head } from './styles'\n\nconst Game = () => {\n  const [height, width] = [16, 30]\n  const [attempts, setAttempts] = useState(1)\n  const [bombCount, setBombCount] = useState(99)\n  const [lost, setLost] = useState(false)\n  const [mouseDown, onMouseDown] = useState(false)\n\n  const structure = useMemo(\n    () => initStructure(height, width, bombCount),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [attempts]\n  )\n\n  const restartGame = () => {\n    setBombCount(99)\n    setAttempts(attempts + 1)\n    setLost(false)\n  }\n\n  return (\n    <div>\n      <Head>\n        <div>Bombs left: {bombCount}</div>\n        <Face lost={lost} mouseDown={mouseDown} onClick={restartGame} />\n        <div>{lost ? 'You lost!' : `Attempt #${attempts}`}</div>\n      </Head>\n      <div\n        onMouseDown={() => { console.log('mousedown'); onMouseDown(true) }}\n        onMouseUp={() => onMouseDown(false)}\n      >\n        <Board\n          bombCount={bombCount}\n          setBombCount={setBombCount}\n          lost={lost}\n          setLost={setLost}\n          structure={structure}\n          width={width}\n          height={height}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Game\n","import styled from 'styled-components'\n\nexport const Cell = styled.div`\n  flex: 1 1 32px;\n  width: 32px;\n  height: 32px;\n  background-image: url('%PUBLIC_URL%/sprite200.gif');\n  background-position: 0 -78px;\n\n  &.unclicked {\n    background-position: 0 -78px;\n  }\n\n  &.bomb {\n    background-position: ${props => props.mistakeWasHere ? '-64px -78px' : '-128px -78px;'}\n  }\n\n  &.mistakenBomb {\n    background-position: -96px -78px;\n  }\n  \n  &.zero {\n    background-position: 0 -46px;\n  }\n\n  &.flag {\n    background-position: -32px -78px;\n  }\n\n  &.one {\n    background-position: -32px -46px;\n  }\n\n  &.two {\n    background-position: -64px -46px;\n  }\n\n  &.three {\n    background-position: -96px -46px;\n  }\n\n  &.four {\n    background-position: -128px -46px;\n  }\n\n  &.five {\n    background-position: -160px -46px;\n  }\n\n  &.six {\n    background-position: -192px -46px;\n  }\n\n  &.seven {\n    background-position: -224px -46px;\n  }\n\n  &.eigth {\n    background-position: -256px -46px;\n  }\n`\n","\nimport React, { useEffect, useState } from 'react'\nimport { Cell } from './styles'\n\nconst CLASSES = Object.freeze({\n  0: 'zero',\n  1: 'one',\n  2: 'two',\n  3: 'three',\n  4: 'four',\n  5: 'five',\n  6: 'six',\n  7: 'seven',\n  8: 'eigth',\n  B: 'bomb',\n  MB: 'mistakenBomb',\n  F: 'flag',\n  U: 'unclicked'\n})\n\nconst Field = React.forwardRef(({ \n    hasMine, value, lost, setLost, updateBombCount, row, column, revealNeighborhood \n  }, ref) => {\n  const [clicked, setClicked] = useState(false)\n  const [isFlagged, setFlagged] = useState(false)\n  const [content, setContent] = useState('U')\n\n  useEffect(() => {\n    if(lost) {\n      if(content === 'F') {\n        if(!hasMine) {\n          setContent('MB')\n        }\n      } else {\n        setContent(value || 0)\n      }\n    } else {\n      setContent('U')\n      setClicked(false)\n      setFlagged(false)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lost, hasMine, setContent, value])\n\n  const handleRightClick = (e) => {\n    e.preventDefault()\n\n    if(clicked || lost) {\n      return\n    }\n\n    const newValue = !isFlagged\n\n    updateBombCount(newValue)\n    setFlagged(newValue)\n\n    if(newValue) {\n      setContent('F')\n    } else {\n      setContent('U')\n    }\n  }\n\n  const handleLeftClick = (e) => {\n    e.preventDefault()\n  \n    if(clicked || lost || content === 'F') {\n      return\n    }\n\n    setClicked(true)\n\n    if (hasMine) { // user clicked on a bomb\n      setContent('B')\n      setLost(true)\n    } else {\n      setContent(value || 0)\n    }\n\n    if(value === \"\") { // empty-cell, traverse the DOM\n      revealNeighborhood(row, column)\n    }\n  }\n\n  return (\n    <Cell\n      ref={ref}\n      onClick={handleLeftClick}\n      onContextMenu={handleRightClick} // to handle right click\n      mistakeWasHere={hasMine && clicked}\n      className={`row${row+1}_column${column+1} ${CLASSES[content]}`}\n      data-testid='minefield'\n    />\n  )\n})\n\nexport default Field\n"],"sourceRoot":""}