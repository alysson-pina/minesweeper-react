{"version":3,"sources":["components/board/Board.jsx","components/board/styles.js","components/board/useBoardPixelWidth.js","assets/logo.svg","styles.js","App.jsx","reportWebVitals.js","index.js","utils/position.js","utils/useBoardCategory.js","utils/mediaQueries.js","constants/board.js","utils/initBoard.js","components/game/styles.js","components/game/useBombCount.js","components/game/useWidth.js","utils/sizes.js","components/game/Game.jsx","utils/getPublicUrl.js","components/field/styles.js","components/field/Field.jsx","components/face/styles.js","components/face/Face.jsx"],"names":["Board","updateBombCount","won","lost","setLost","structure","width","fieldsRef","useRef","computeBoardPixelWidth","useBoardPixelWidth","revealNeighborhood","row","column","pos","get1DIndexFrom2D","columns","rows","x","y","candidateFieldPos","HEIGHT","ref","current","setImmediate","click","map","i","j","value","el","hasMine","Wrapper","styled","div","props","useBoardCategory","AppMain","main","AppHeader","h1","AppSection","section","Logo","img","App","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","get2DIndexFrom1D","Math","floor","Number","parseInt","isLargeScreen","useMediaQuery","isSmallScreen","initStructure","bombCount","Array","from","length","_","count","random","updateNeighbours","index1D","nOfBombs","Head","useBombCount","useWidth","Game","initialBombCount","useState","attempts","setAttempts","setBombCount","bombsFlaggedCorrect","setBombsFlaggedCorrect","setWon","mouseDown","onMouseDown","setStructure","restartGame","useCallback","useEffect","onMouseUp","flagged","isCorrectFlag","increment","prependWithPublicUrl","url","process","Cell","mistakeWasHere","CLASSES","Object","freeze","B","MB","F","U","Field","React","forwardRef","clicked","setClicked","isFlagged","setFlagged","content","setContent","onClick","e","preventDefault","onContextMenu","newValue","className","startPosition","Face"],"mappings":"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","file":"static/js/main.72d90f35.chunk.js","sourcesContent":["\nimport React, { useRef } from 'react'\n\n\nimport { Wrapper } from './styles'\nimport { Field } from '..'\nimport { get1DIndexFrom2D } from '../../utils/position'\nimport useBoardPixelWidth from './useBoardPixelWidth'\nimport { HEIGHT } from '../../constants/board'\n\nconst Board = ({ updateBombCount, won, lost, setLost, structure, width }) => {\n  const fieldsRef = useRef([])\n  const computeBoardPixelWidth = useBoardPixelWidth()\n\n  const revealNeighborhood = (row, column) => {\n    const pos = get1DIndexFrom2D(column, row, width)\n    const columns = [column - 1, column, column + 1]\n    const rows = [row - 1, row, row + 1]\n\n    for(let x in columns) {\n      for (let y in rows ) {\n        const candidateFieldPos = get1DIndexFrom2D(columns[x], rows[y], width)\n        if(\n          (candidateFieldPos === pos) || // avoid same field again\n          (columns[x] < 0 || rows[y] < 0) || // avoid inexistant left or top edges\n          ( rows[y] >= HEIGHT || columns[x] >= width ) // avoid inexistant right or bottom edges\n          ) {\n            continue\n          }\n\n          const ref = fieldsRef.current[candidateFieldPos]\n\n          setImmediate(\n            () => ref?.click() // async click to avoid infinite loop\n          )\n      }\n    }\n  }\n\n  return (\n    <Wrapper width={computeBoardPixelWidth}>\n      {\n        structure?.map(({ i, j, value }) => {\n          const pos = get1DIndexFrom2D(j, i, width)\n\n          return (\n            <Field\n              ref={el => {\n                fieldsRef.current[pos] = el\n              } }\n              key={`${i}_${j}`} \n              row={i}\n              column={j}\n              hasMine={value === 'B'}\n              value={value}\n              won={won}\n              lost={lost}\n              setLost={setLost}\n              updateBombCount={updateBombCount}\n              revealNeighborhood={revealNeighborhood}\n            />\n          )\n        })\n      }\n    </Wrapper>\n  )\n}\n\nexport default Board\n","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: ${props => props.width};\n`\n\n","import useBoardCategory from '../../utils/useBoardCategory'\n\nconst useBoardPixelWidth = () => {\n  const boardCategory = useBoardCategory()\n\n  switch(boardCategory) {\n    case 'SMALL': \n      return '352px'\n    case 'MEDIUM':\n      return '516px'\n    default:\n      return '970px'\n  }\n}\n\nexport default useBoardPixelWidth\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import styled from 'styled-components'\n\nexport const AppMain = styled.main`\n  width: 100%;\n  text-align: center;\n`\n\nexport const AppHeader = styled.h1`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: white;\n  margin: 0;\n  padding: 16px 0;\n  width: 100%;\n`\n\nexport const AppSection = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 16px;\n  color: white;\n`\n\nexport const Logo = styled.img`\n  pointer-events: none;\n\n  @media (prefers-reduced-motion: no-preference) {\n      animation: App-logo-spin infinite 20s linear;\n  }\n\n  @keyframes App-logo-spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`\n","import logo from './assets/logo.svg'\nimport { AppHeader, AppMain, AppSection, Logo } from './styles'\n\nimport { Game } from './components'\n\nconst App = () => {\n  return (\n    <AppMain>\n      <AppHeader>\n        Modern React Minesweeper <Logo width='64' src={logo} alt='react logo'/>\n      </AppHeader>\n      <AppSection>\n        <Game />\n      </AppSection>\n    </AppMain>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const get2DIndexFrom1D = (pos, width) => ({\n  i: Math.floor(pos / width),\n  j: pos % width\n})\n\nexport const get1DIndexFrom2D = (column, row, width) => (\n  Number.parseInt(column) + Number.parseInt(row) * width\n)\n","import { useSmallScreen, useLargeScreen } from './mediaQueries'\n\nconst useBoardCategory = () => {\n  const isLargeScreen = useLargeScreen()\n  const isSmallScreen = useSmallScreen()\n\n  return isLargeScreen ? 'LARGE' : isSmallScreen ? 'SMALL' : 'MEDIUM'\n}\n\nexport default useBoardCategory\n","import useMediaQuery from '@material-ui/core/useMediaQuery'\n\nexport const useLargeScreen = () => useMediaQuery('(min-width:980px)')\nexport const useSmallScreen = () => useMediaQuery('(max-width:596px)')\n","export const HEIGHT = 16\n","import { HEIGHT } from '../constants/board'\nimport { get1DIndexFrom2D, get2DIndexFrom1D } from './position'\n\nexport const initStructure = (width, bombCount) => {\n  const structure = Array.from(\n    { length: HEIGHT * width }, (_, i) => ({\n      i: Math.floor(i / width),\n      j: i % width,\n      value: ''\n    })\n  )\n\n  let pos\n  let count = 0\n\n  while (count < bombCount) {\n    pos = Math.floor((Math.random() * HEIGHT * width))\n\n    if (structure[pos].value !== 'B') {\n      structure[pos].value = 'B'\n      updateNeighbours(structure, pos, width)\n      count += 1\n    }\n  }\n\n  return structure\n}\n\nconst updateNeighbours = (structure, pos, width) => {\n  const { i, j } = get2DIndexFrom1D(pos, width)\n  const rows = [i - 1, i, i + 1]\n  const columns = [j - 1, j, j + 1]\n\n  let index1D, nOfBombs\n\n  for (const x in rows) {\n    for (const y in columns) {\n      if (\n        (rows[x] < 0 || columns[y] < 0) ||\n        (columns[y] >= width || rows[x] >= HEIGHT)\n      ) {\n        continue\n      }\n\n      index1D = get1DIndexFrom2D(columns[y], rows[x], width)\n      if (structure[index1D] && structure[index1D]?.value !== 'B') {\n        nOfBombs = structure[index1D].value\n        structure[index1D].value = nOfBombs ? nOfBombs + 1 : 1\n      }\n    }\n  }\n}\n","import styled from 'styled-components'\n\nexport const Head = styled.div`\n  margin: 20px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: 600;\n`\n","import useBoardCategory from '../../utils/useBoardCategory'\n\nconst useBombCount = () => {\n  const boardCategory = useBoardCategory()\n\n  switch(boardCategory) {\n    case 'SMALL': \n      return 36\n    case 'MEDIUM':\n      return 52\n    default:\n      return 99\n  }\n}\n\nexport default useBombCount\n","import { SMALL, MEDIUM, LARGE } from '../../utils/sizes'\nimport useBoardCategory from '../../utils/useBoardCategory'\n\nconst useWidth = () => {\n  const boardCategory = useBoardCategory()\n\n  switch(boardCategory) {\n    case 'SMALL': \n      return SMALL\n    case 'MEDIUM':\n      return MEDIUM\n    default:\n      return LARGE\n  }\n}\n\nexport default useWidth\n","export const SMALL = 11\nexport const MEDIUM = 16\nexport const LARGE = 30 \n","import React, { useCallback, useEffect, useState } from 'react'\n\nimport { Board, Face } from '..'\nimport { initStructure } from '../../utils/initBoard'\n\nimport { Head } from './styles'\nimport useBombCount from './useBombCount'\nimport useWidth from './useWidth'\n\nconst Game = () => {\n  const initialBombCount = useBombCount()\n  const width = useWidth()\n  const [attempts, setAttempts] = useState(1)\n  const [bombCount, setBombCount] = useState(initialBombCount)\n  const [bombsFlaggedCorrect, setBombsFlaggedCorrect] = useState(initialBombCount)\n  const [won, setWon] = useState(false)\n  const [lost, setLost] = useState(false)\n  const [mouseDown, onMouseDown] = useState(false)\n  const [structure, setStructure] = useState(initStructure(width, initialBombCount))\n\n  const restartGame = useCallback(() => {\n    setBombCount(initialBombCount)\n    setBombsFlaggedCorrect(initialBombCount)\n    setLost(false)\n    setWon(false)\n  }, [setBombCount, setLost, setWon, initialBombCount])\n\n  useEffect(() => {\n    setStructure(initStructure(width, initialBombCount))\n    restartGame()\n  }, [initialBombCount, restartGame, width])\n\n  const updateBombCount = (flagged, isCorrectFlag) => {\n    const increment = flagged ? -1 : 1\n\n    setBombCount(bombCount + increment)\n\n    if(isCorrectFlag) {\n      setBombsFlaggedCorrect(bombsFlaggedCorrect + increment)\n\n      if((bombsFlaggedCorrect + increment === 0) && (bombCount + increment === 0)) {\n        // here means: no bombs are left, and all flagged fields are indeed bombs \n        setWon(true)\n      }\n    }\n  }\n\n  const handleFaceClick = () => {\n    setAttempts(() => attempts + 1)\n    setStructure(initStructure(width, initialBombCount))\n    restartGame()\n  }\n\n  return (\n    <div>\n      <Head>\n        <div>Bombs left: {bombCount}</div>\n        <Face won={won} lost={lost} mouseDown={mouseDown} restartGame={handleFaceClick} />\n        <div>{lost ? 'You lost!' : won? 'You won!' : `Attempt #${attempts}`}</div>\n      </Head>\n      <div\n        onMouseDown={() => onMouseDown(true)}\n        onMouseUp={() => onMouseDown(false)}\n      >\n        <Board\n          bombCount={bombCount}\n          updateBombCount={updateBombCount}\n          won={won}\n          lost={lost}\n          setLost={setLost}\n          structure={structure}\n          width={width}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Game\n","const prependWithPublicUrl = (url) => process.env.PUBLIC_URL ? `${process.env.PUBLIC_URL}/${url}` : url\n\nexport default prependWithPublicUrl\n","import styled from 'styled-components'\nimport prependWithPublicUrl from '../../utils/getPublicUrl'\n\nexport const Cell = styled.div`\n  flex: 1 1 32px;\n  width: 32px;\n  height: 32px;\n  background-image: url(${prependWithPublicUrl('sprite200.gif')});\n  background-position: 0 -78px;\n\n  &.unclicked {\n    background-position: 0 -78px;\n  }\n\n  &.bomb {\n    background-position: ${props => props.mistakeWasHere ? '-64px -78px' : '-128px -78px;'}\n  }\n\n  &.mistakenBomb {\n    background-position: -96px -78px;\n  }\n  \n  &.zero {\n    background-position: 0 -46px;\n  }\n\n  &.flag {\n    background-position: -32px -78px;\n  }\n\n  &.one {\n    background-position: -32px -46px;\n  }\n\n  &.two {\n    background-position: -64px -46px;\n  }\n\n  &.three {\n    background-position: -96px -46px;\n  }\n\n  &.four {\n    background-position: -128px -46px;\n  }\n\n  &.five {\n    background-position: -160px -46px;\n  }\n\n  &.six {\n    background-position: -192px -46px;\n  }\n\n  &.seven {\n    background-position: -224px -46px;\n  }\n\n  &.eigth {\n    background-position: -256px -46px;\n  }\n`\n","\nimport React, { useEffect, useState } from 'react'\nimport { Cell } from './styles'\n\nconst CLASSES = Object.freeze({\n  0: 'zero',\n  1: 'one',\n  2: 'two',\n  3: 'three',\n  4: 'four',\n  5: 'five',\n  6: 'six',\n  7: 'seven',\n  8: 'eigth',\n  B: 'bomb',\n  MB: 'mistakenBomb',\n  F: 'flag',\n  U: 'unclicked'\n})\n\nconst Field = React.forwardRef(({ \n    hasMine, value, won, lost, setLost, updateBombCount, row, column, revealNeighborhood \n  }, ref) => {\n  const [clicked, setClicked] = useState(false)\n  const [isFlagged, setFlagged] = useState(false)\n  const [content, setContent] = useState('U')\n\n  useEffect(() => {\n    if(lost) {\n      if(content === 'F') {\n        if(!hasMine) {\n          setContent('MB')\n        }\n      } else {\n        setContent(value || 0)\n      }\n    } else {\n      setContent('U')\n      setClicked(false)\n      setFlagged(false)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [lost, hasMine, setContent, value])\n\n  const handleRightClick = (e) => {\n    e.preventDefault()\n\n    if(clicked || lost || won) {\n      return\n    }\n\n    const newValue = !isFlagged\n\n    updateBombCount(newValue, hasMine)\n    setFlagged(newValue)\n\n    if(newValue) {\n      setContent('F')\n    } else {\n      setContent('U')\n    }\n  }\n\n  const handleLeftClick = (e) => {\n    e.preventDefault()\n  \n    if(clicked || lost || won || content === 'F') {\n      return\n    }\n\n    setClicked(true)\n\n    if (hasMine) { // user clicked on a bomb\n      setContent('B')\n      setLost(true)\n    } else {\n      setContent(value || 0)\n    }\n\n    if(value === \"\") { // empty-cell, traverse the DOM\n      revealNeighborhood(row, column)\n    }\n  }\n\n  return (\n    <Cell\n      ref={ref}\n      onClick={handleLeftClick}\n      onContextMenu={handleRightClick} // to handle right click\n      mistakeWasHere={hasMine && clicked}\n      className={`row${row+1}_column${column+1} ${CLASSES[content]}`}\n      data-testid='minefield'\n    />\n  )\n})\n\nexport default Field\n","\nimport styled from 'styled-components'\nimport prependWithPublicUrl from '../../utils/getPublicUrl'\n\nexport const Wrapper = styled.div`\n  background-image: url(${prependWithPublicUrl('sprite200.gif')});\n  background-position: ${props => props.startPosition} -110px;\n  width: 52px;\n  height: 52px;\n`\n","import React from 'react'\nimport { Wrapper } from './styles'\n\nconst Face = ({ won, lost, mouseDown, restartGame }) => {\n  const startPosition = won ? '-208px' : lost ? '-156px' : mouseDown ? '-104px' : '0'\n\n  return <Wrapper startPosition={startPosition} onClick={() => restartGame()} />\n}\n\nexport default Face\n"],"sourceRoot":""}